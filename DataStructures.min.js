function addNode(value){let children=[];return{value,children,addChild(childValue){let child=addNode(childValue);children.push(child);return child}}}
exports.addNode=addNode;function Tree(rootValue){let root=addNode(rootValue);return{root,display(){var out="";read(root,0);function read(node,indent){out+="   ".repeat(indent)+node.value+" => \n";if(node.children.length){node.children.forEach(child=>{read(child,indent+1)})}}
return out}}}
exports.Tree=Tree;function addBinaryNode(value){return{value,left:null,right:null,addChild(childValue){let childNode=addBinaryNode(childValue);if(this.left===null)
this.left=childNode;else this.right=childNode;return childNode},addLeftChild(childValue){let childNode=addBinaryNode(childValue);this.left=childNode;return childNode},addRightChild(childValue){let childNode=addBinaryNode(childValue);this.right=childNode;return childNode}}}
exports.addBinaryNode=addBinaryNode;function BinaryTree(rootValue){let root=addBinaryNode(rootValue);return{root,display(){inOrder(root);function inOrder(node){if(node!=null){inOrder(node.left);console.log(node.value+" ");inOrder(node.right)}
else return}},}}
exports.BinaryTree=BinaryTree;function addBinarySearchNode(value){return{value,left:null,right:null,insert(childValue){let childNode=addBinarySearchNode(childValue)
traverse(this,childNode);function traverse(node,childNode){if(node==null)
return childNode;if(childValue>node.value)
node.right=traverse(node.right,childNode);else node.left=traverse(node.left,childNode);return node}
return childNode}}}
exports.addBinarySearchNode=addBinarySearchNode;function BinarySearchTree(rootValue){let root=addBinarySearchNode(rootValue);return{root,display(){postOrder(root);function inOrder(node){if(node!=null){inOrder(node.left);console.log(node.value+" ");inOrder(node.right)}
else return}
function postOrder(node){if(node!=null){postOrder(node.left);postOrder(node.right);console.log(node.value+" ")}
else return}},search(value){look(root)
function look(node){if(value>node.value)
look(node.right);else if(value==node.value)
return node;else look(node.left)}
return-1}}}
exports.BinarySearchTree=BinarySearchTree;function Stack(){let stack=[];return{stack,push(value){stack.push(value)},pop(){return stack.pop()},peek(){return stack[stack.length-1]},isEmpty(){return stack.length!=0?!1:!0}}}
exports.Stack=Stack;function Queue(){let queue=[];return{queue,enqueue(value){queue.push(value)},dequeue(){return queue.shift()},peek(){return queue[0]},isEmpty(){return queue.length!=0?!1:!0}}}
exports.Queue=Queue;function PriorityQueue(){let queue=[];return{queue,enqueue(value,priority){queue.push({value,priority})
queue.sort(function(a,b){return a.priority-b.priority})},dequeue(){return queue.shift()},peek(){return queue[0].value},isEmpty(){return queue.length!=0?!1:!0}}}
exports.PriorityQueue=PriorityQueue;function createGraphNode(value){let adjacentNodes=[];return{value,adjacentNodes,addAdjacent(node){adjacentNodes.push(node)}}}
exports.createGraphNode=createGraphNode;function Graph(directed=!1){let nodes=[];let edges=[];return{directed,nodes,edges,addNode(value){nodes.push(createGraphNode(value))},getNode(value){return nodes.find(node=>node.value===value)},addEdge(value1,value2){if(this.getNode(value1)===undefined)
this.addNode(value1);if(this.getNode(value2)===undefined)
this.addNode(value2);let node1=this.getNode(value1);let node2=this.getNode(value2);node1.addAdjacent(node2);edges.push([node1,node2]);if(!directed)
node2.addAdjacent(node1)},BFS(startValue){let order=[];let startNode=this.getNode(startValue);let visited={};nodes.forEach(node=>{visited[node.value]=!1});let q=Queue();q.enqueue(startNode);while(!q.isEmpty()){let currentNode=q.dequeue()
visited[currentNode.value]=!0
order.push(currentNode.value);currentNode.adjacentNodes.forEach(node=>{if(!visited[node.value])
q.enqueue(node)})}
return order},DFS(startValue){let order=[];let startNode=this.getNode(startValue);let visited={};nodes.forEach(node=>{visited[node.value]=!1});visit(startNode,visited);function visit(currnode,visited){visited[currnode.value]=!0;order.push(currnode.value);currnode.adjacentNodes.forEach(node=>{if(!visited[node.value])
visit(node,visited)})}
return order},fromAdjMatrix(matrix,directed=!1){if(matrix.length!=matrix[0].length)
return null;for(let i=0;i<matrix.length;i++){if(!directed){for(let j=i+1;j<matrix[i].length;j++){if(matrix[i][j]==1)
this.addEdge(i,j)}}
else{for(let j=0;j<matrix[i].length;j++){if(matrix[i][j]==1)
this.addEdge(i,j)}}}},topologicalSort(){if(!directed)
return"Toplogical sort can only be done on Directed Acyclic Graphs";let order=[];let visited={};nodes.forEach(node=>{visited[node.value]=!1});nodes.forEach(node=>{if(!visited[node.value])
topSort(node)})
function topSort(currnode){visited[currnode.value]=!0;currnode.adjacentNodes.forEach(node=>{if(!visited[node.value])
topSort(node)});order.push(currnode.value)}
return order.reverse()}}}
exports.Graph=Graph;let alphabetSize=26;function createTrieNode(){let endOfWord=!1;let children=Array(alphabetSize).fill(null);return{endOfWord,children}}
exports.createTrieNode=createTrieNode;function Trie(){let root=createTrieNode();return{root,insertWord(value){let len=value.length;let temp=root;for(let level=0;level<len;level++){let index=value.charCodeAt(level)-"a".charCodeAt(0);if(temp.children[index]===null)
temp.children[index]=createTrieNode();temp=temp.children[index]}
temp.endOfWord=!0},search(value){let len=value.length;let temp=root;for(let level=0;level<len;level++){let index=value.charCodeAt(level)-"a".charCodeAt(0);if(temp.children[index]===null)
return!1;temp=temp.children[index]}
return(temp!==null&&temp.endOfWord)}}}
exports.Trie=Trie;function powerSet(array,index=0,curr=""){let result=[];let len=array.length;powSet(index=0,curr="");function powSet(index=0,curr=""){if(index==len){result.push(curr.split(""));return}
powSet(index+1,curr+array[index]);powSet(index+1,curr)}
return result}
exports.powerSet=powerSet;function permutations(array){let n=array.length;let size=n;let result=[];heapPermutations(array,size)
function heapPermutations(array,size){if(size===1){return}
for(let i=0;i<size;i++){heapPermutations(array,size-1)
console.log(array)
if(size%2===0){let x=array[0];array[0]=array[size-1];array[size-1]=x}
else{let x=array[i];array[i]=array[size-1];array[size-1]=x}}}}
function createNode(value){return{value,next:null}}
exports.createNode=createNode;function LinkedList(){return{head:null,tail:null,length:0,isEmpty(){return this.length==0},push(value){let node=createNode(value);if(this.head==null){this.head=node;this.tail=node;this.length++;return node}
this.tail.next=node;this.tail=node;this.length++},pop(){let node=this.tail;if(this.tail==this.head){this.head=null;this.tail=null;this.length--;return node}
let curr=this.head;while(curr.next!=node){curr=curr.next}
curr.next=null;this.tail=curr;this.length--;return node},get(index){if(index<0||index>=this.length)
return null;if(index==0)
return this.head;let curr=this.head;let i=0;while(index!=i){curr=curr.next;i++}
return curr},delete(index){if(index<0||index>=this.length)
return null;if(index==0){let deleted=this.head;this.head=this.head.next;this.length--;return deleted}
let curr=this.head;let i=0;while(index-1!=i){curr=curr.next;i++}
let del=curr.next;if(del==this.tail){this.tail=curr}
curr.next=curr.next.next;this.length--;return del},display(){let curr=this.head;let result="";while(curr.next!=null){result+=curr.value.toString()+" âžž ";curr=curr.next}
result+=curr.value.toString();return result}}}
exports.LinkedList=LinkedList;function heapify(array,n,i){let largest=i
let l=2*i+1;let r=2*i+2;if(r<n&&array[i].key<array[r].key)
largest=r;if(l<n&&array[largest].key<array[l].key)
largest=l;if(largest!=i){var temp=array[i];array[i]=array[largest];array[largest]=temp;heapify(array,n,largest)}}
exports.heapify=heapify;function heapifyMin(array,n,i){let smallest=i;let l=2*i+1;let r=2*i+2;if(r<n&&array[i].key>array[r].key)
smallest=r;if(l<n&&array[smallest].key>array[l].key)
smallest=l;if(smallest!=i){var temp=array[i];array[i]=array[smallest];array[smallest]=temp;heapifyMin(array,n,smallest)}}
exports.heapifyMin=heapifyMin;function HeapSort(array,min=!1){let n=array.length;for(let i=parseInt(n/2-1);i>-1;i--){if(!min)
heapify(array,n,i);else heapifyMin(array,n,i)}
for(let j=n-1;j>0;j--){let temp=array[j];array[j]=array[0];array[0]=temp;if(!min)
heapify(array,j,0);else heapifyMin(array,j,0)}}
exports.HeapSort=HeapSort