function t(e){let l=[];return{value:e,children:l,addChild(e){let n=t(e);return l.push(n),n}}}function e(e){let l=t(e);return{root:l,display(){var t="";return function e(l,n){t+="   ".repeat(n)+l.value+" âžž \n",l.children.length&&l.children.forEach((t=>{e(t,n+1)}))}(l,0),t}}}function l(t){return{value:t,left:null,right:null,addChild(t){let e=l(t);return null===this.left?this.left=e:this.right=e,e},addLeftChild(t){let e=l(t);return this.left=e,e},addRightChild(t){let e=l(t);return this.right=e,e}}}const n={pre:"pre",post:"post",in:"in"};function r(t){let e=l(t);return{root:e,display(t){let l="";function n(t){null!=t&&(n(t.left),n(t.right),l+=t.value+" ")}return"post"==t?n(e):"pre"==t?function(t){if(null==t)return;l+=t.value+" ",n(t.left),n(t.right)}(e):function t(e){if(null==e)return;t(e.left),l+=e.value+" ",t(e.right)}(e),l}}}export{r as BinaryTree,e as Tree,l as addBinaryNode,t as addNode,n as order};
