!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).DataStructures={})}(this,(function(e){"use strict";function t(e){let n=[];return{value:e,children:n,addChild(e){let r=t(e);return n.push(r),r}}}function n(e){return{value:e,left:null,right:null,addChild(e){let t=n(e);return null===this.left?this.left=t:this.right=t,t},addLeftChild(e){let t=n(e);return this.left=t,t},addRightChild(e){let t=n(e);return this.right=t,t}}}e.BinaryTree=function(e){let t=n(e);return{root:t,display(e){let n="";function r(e){null!=e&&(r(e.left),r(e.right),n+=e.value+" ")}return"post"==e?r(t):"pre"==e?function(e){if(null==e)return;n+=e.value+" ",r(e.left),r(e.right)}(t):function e(t){if(null==t)return;e(t.left),n+=t.value+" ",e(t.right)}(t),n}}},e.Tree=function(e){let n=t(e);return{root:n,display(){var e="";return function t(n,r){e+="   ".repeat(r)+n.value+" âžž \n",n.children.length&&n.children.forEach((e=>{t(e,r+1)}))}(n,0),e}}},e.addBinaryNode=n,e.addNode=t,e.order={pre:"pre",post:"post",in:"in"}}));
