!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).DataStructures={})}(this,(function(e){"use strict";function t(e){let n=[];return{value:e,children:n,addChild(e){let u=t(e);return n.push(u),u}}}function n(e){return{value:e,left:null,right:null,addChild(e){let t=n(e);return null===this.left?this.left=t:this.right=t,t},addLeftChild(e){let t=n(e);return this.left=t,t},addRightChild(e){let t=n(e);return this.right=t,t}}}function u(e){return{value:e,left:null,right:null,insert(e){let t=u(e);return function t(n,u){if(null==n)return u;e>n.value?n.right=t(n.right,u):n.left=t(n.left,u);return n}(this,t),t}}}e.BinarySearchTree=function(e){let t=u(e);return{root:t,display(e){let n="";function u(e){null!=e&&(u(e.left),u(e.right),n+=e.value+" ")}return"post"==e?u(t):"pre"==e?function(e){if(null==e)return;n+=e.value+" ",u(e.left),u(e.right)}(t):function e(t){if(null==t)return;e(t.left),n+=t.value+" ",e(t.right)}(t),n},search:e=>(function t(n){if(e>n.value)t(n.right);else{if(e==n.value)return n;t(n.left)}}(t),-1)}},e.BinaryTree=function(e){let t=n(e);return{root:t,display(e){let n="";function u(e){null!=e&&(u(e.left),u(e.right),n+=e.value+" ")}return"post"==e?u(t):"pre"==e?function(e){if(null==e)return;n+=e.value+" ",u(e.left),u(e.right)}(t):function e(t){if(null==t)return;e(t.left),n+=t.value+" ",e(t.right)}(t),n}}},e.PriorityQueue=function(){let e=[];return{queue:e,enqueue(t,n){e.push({value:t,key:n}),HeapSort(e)},dequeue:()=>e.shift(),peek:()=>e[0].value,isEmpty:()=>0==e.length}},e.Queue=function(){let e=[];return{queue:e,enqueue(t){e.push(t)},dequeue:()=>e.shift(),peek:()=>e[0],isEmpty:()=>0==e.length}},e.Stack=function(){let e=[];return{stack:e,push(t){e.push(t)},pop:()=>e.pop(),peek:()=>e[e.length-1],isEmpty:()=>0==e.length}},e.Tree=function(e){let n=t(e);return{root:n,display(){var e="";return function t(n,u){e+="   ".repeat(u)+n.value+" âžž \n",n.children.length&&n.children.forEach((e=>{t(e,u+1)}))}(n,0),e}}},e.addBinaryNode=n,e.addBinarySearchNode=u,e.addNode=t,e.order={pre:"pre",post:"post",in:"in"}}));
